pipeline {
    agent any

    stages {
        stage('Test SSH Connection') {
            steps {
                sshPublisher(
                    continueOnError: false, failOnError: true,
                    publishers: [
                        sshPublisherDesc(
                            configName: 'ApplicationServer',  // SSH 서버 설정의 이름
                            verbose: true,  // 세부 정보를 콘솔 출력에 표시
                            transfers: [
                                sshTransfer(
                                    execCommand: 'ls',  // 원격 서버에서 실행할 명령어
                                    execTimeout: 120000  // 명령어 실행 제한 시간(밀리초)
                                )
                            ]
                        )
                    ]
                )
            }
        }



        stage('Clone Repository') {
            steps {
                git branch: 'main',
                url: "https://github.com/alsduq1117/gameplanner.git",
                credentialsId: 'minyeob'
            }
        }

        stage('Build Project') {
            steps {
                sh 'chmod +x gradlew'
                sh './gradlew clean build'
            }
        }

        stage('Docker Login') {
            steps {
                sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t alsduq1117/jenkins:test .'
            }
        }

        stage('Push Docker Image') {
            steps {
                sh 'docker push alsduq1117/jenkins:test'
            }
        }

        stage('Deploy') {
            steps {
                sshPublisher(
                    continueOnError: false, failOnError: true,
                    publishers: [
                        sshPublisherDesc(
                            configName: 'ApplicationServer',
                            verbose: true,
                            transfers: [
                                sshTransfer(
                                    sourceFiles: '$JAR_FILE_PATH,$SCRIPT_FILE_PATH',
                                    removePrefix: '',
                                    remoteDirectory: '/',
                                    execCommand: '''
                                    echo "JAR_FILE_PATH: ${JAR_FILE_PATH}"
                                    echo "SCRIPT_FILE_PATH: ${SCRIPT_FILE_PATH}"
                                    echo "Starting deployment..."
                                    sudo chmod 777 /home/ubuntu/app/$SCRIPT_FILE_PATH
                                    sudo chmod 777 /home/ubuntu/app/$JAR_FILE_PATH
                                    echo "Running DockerDeploy.sh..."
                                    /home/ubuntu/app/$SCRIPT_FILE_PATH
                                    echo "Deployment finished."
                                    '''
                                )
                            ]
                        )
                    ]
                )
            }
        }
    }
}
